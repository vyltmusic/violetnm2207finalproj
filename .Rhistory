test <- c("Artificer", "Barbarian")
i <- dnd_chars_unique_edited[218,]
i
j <- i[dnd_classes] %>%
unlist()
(any(dnd_classes[j] %in% test) & all(! dnd_classes[j] %in% (dnd_classes[! dnd_classes %in% test])))
dnd_classes <- c("Artificer", "Barbarian", "Bard", "Blood Hunter", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard")
test <- c("Artificer", "Barbarian")
i <- dnd_chars_unique_edited[137,]
i
j <- i[dnd_classes] %>%
unlist()
(any(dnd_classes[j] %in% test) & all(! dnd_classes[j] %in% (dnd_classes[! dnd_classes %in% test])))
dnd_classes <- c("Artificer", "Barbarian", "Bard", "Blood Hunter", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard")
test <- c("Artificer", "Barbarian")
i <- dnd_chars_unique_edited[237,]
i
j <- i[dnd_classes] %>%
unlist()
(any(dnd_classes[j] %in% test) & all(! dnd_classes[j] %in% (dnd_classes[! dnd_classes %in% test])))
dnd_chars_unique_edited
dnd_chars_unique_edited[nchar(justClass) > 13]
dnd_chars_unique_edited[nchar(.justClass) > 13]
dnd_chars_unique_edited[nchar(dnd_chars_unique_edited.justClass) > 13]
dnd_chars_unique_edited[nchar(dnd_chars_unique_edited$justClass) > 13]
dnd_chars_unique_edited$justClass
nchar(dnd_chars_unique_edited$justClass)
dnd_chars_unique_edited[nchar(dnd_chars_unique_edited$justClass) > 13]
dnd_chars_unique_edited[nchar(na.omit(dnd_chars_unique_edited$justClass) > 13]
dnd_chars_unique_edited[nchar(na.omit(dnd_chars_unique_edited$justClass)) > 13]
na.omit(dnd_chars_unique_edited$justClass)
[nchar(na.omit(dnd_chars_unique_edited$justClass)) > 13]
nchar(na.omit(dnd_chars_unique_edited$justClass)) > 13
dnd_chars_unique_edited[nchar(na.omit(dnd_chars_unique_edited$justClass)) > 13]
dnd_chars_unique_edited$justClass[nchar(na.omit(dnd_chars_unique_edited$justClass)) > 13]
filter(dnd_chars_unique_edited, nchar(na.omit(dnd_chars_unique_edited$justClass)) > 13)
dnd_classes <- c("Artificer", "Barbarian", "Bard", "Blood Hunter", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard")
test <- c("Barbarian", "Sorcerer")
i <- dnd_chars_unique_edited[8100,]
i
j <- i[dnd_classes] %>%
unlist()
(any(dnd_classes[j] %in% test) & all(! dnd_classes[j] %in% (dnd_classes[! dnd_classes %in% test])))
#
#
# filter(dnd_chars_unique_edited, nchar(na.omit(dnd_chars_unique_edited$justClass)) > 13)
dnd_classes <- c("Artificer", "Barbarian", "Bard", "Blood Hunter", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard")
test <- c("Barbarian", "Sorcerer")
i <- dnd_chars_unique_edited[8100,]
i
j <- i[dnd_classes] %>%
unlist()
(any(dnd_classes[j] %in% test) & all(! dnd_classes[j] %in% (dnd_classes[! dnd_classes %in% test])))
#
#
# filter(dnd_chars_unique_edited, nchar(na.omit(dnd_chars_unique_edited$justClass)) > 13)
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
dnd_chars_unique_edited[8100,]
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
```{r}
runApp("App-DnD", display.mode = "showcase")
setdiff(c(1,2,3), c(1,2))
setdiff(c(1,2,3,4), c(1,2))
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
knitr::opts_chunk$set(echo = TRUE)
runApp("App-DnD", display.mode = "showcase")
library(shiny)
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
dnd_classes <- c("Artificer", "Barbarian", "Bard", "Blood Hunter", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard")
```{r}
library(dnddata)
library(tidyverse)
library(dnddata)
dnd_chars_unique_edited <- dnd_chars_unique
dnd_chars_unique[["Str"]]
dnd_chars_unique[["Str"]] %>%
typeof()
?count
?length
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
```{r}
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
any(is.na(select(dnd_chars_unique, dnd_stats)))
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
datasetInput_no_outliers()
library(dnddata)
library(tidyverse)
dnd_chars_unique
dnd_chars_unique["Str":"Cha"]
dnd_chars_unique["Str"]
dnd_stats <- c("Str", "Dex", "Con", "Int", "Wis", "Cha")
dnd_chars_unique[dnd_stats]
dnd_chars_unique[dnd_stats] %>%
mean()
mean(i)
for(i in dnd_stats){
mean(i)
}
mean(dnd_chars_unique[i])
for(i in dnd_stats){
mean(dnd_chars_unique[i])
}
for(i in dnd_stats){
mean(dnd_chars_unique[[i]])
}
mean(dnd_chars_unique[[i]])
dnd_stats <- c("Str", "Dex", "Con", "Int", "Wis", "Cha")
test <- dnd_chars_unique[dnd_stats]
for(i in dnd_stats){
mean(dnd_chars_unique[[i]])
}
dnd_stats <- c("Str", "Dex", "Con", "Int", "Wis", "Cha")
test <- dnd_chars_unique[dnd_stats]
for(i in dnd_stats){
mean(dnd_chars_unique[[i]])
}
dnd_stats <- c("Str", "Dex", "Con", "Int", "Wis", "Cha")
test <- dnd_chars_unique[dnd_stats]
for(i in dnd_stats){
mean(dnd_chars_unique[[i]])
}
dnd_stats <- c("Str", "Dex", "Con", "Int", "Wis", "Cha")
test <- dnd_chars_unique[dnd_stats]
for(i in dnd_stats){
mean(dnd_chars_unique[[i]])
}
dnd_stats <- c("Str", "Dex", "Con", "Int", "Wis", "Cha")
test <- dnd_chars_unique[dnd_stats]
for(i in dnd_stats){
mean(dnd_chars_unique[[i]])
}
dnd_stats <- c("Str", "Dex", "Con", "Int", "Wis", "Cha")
test <- dnd_chars_unique[dnd_stats]
for(i in dnd_stats){
mean(dnd_chars_unique[[i]])
}
dnd_stats <- c("Str", "Dex", "Con", "Int", "Wis", "Cha")
test <- dnd_chars_unique[dnd_stats]
for(i in dnd_stats){
mean(dnd_chars_unique[[i]])
}
dnd_stats <- c("Str", "Dex", "Con", "Int", "Wis", "Cha")
test <- dnd_chars_unique[dnd_stats]
for(i in dnd_stats){
mean(dnd_chars_unique[[i]])
}
dnd_stats <- c("Str", "Dex", "Con", "Int", "Wis", "Cha")
test <- dnd_chars_unique[dnd_stats]
for(i in dnd_stats){
mean(dnd_chars_unique[[i]])
}
dnd_stats <- c("Str", "Dex", "Con", "Int", "Wis", "Cha")
test <- dnd_chars_unique[dnd_stats]
for(i in dnd_stats){
mean(dnd_chars_unique[[i]])
}
return()
for(i in dnd_stats){
mean(dnd_chars_unique[[i]])
return()
}
mean(dnd_chars_unique[["Str"]])
for(i in dnd_stats){
mean(dnd_chars_unique[[i]])
}
test <- c()
dnd_stats <- c("Str", "Dex", "Con", "Int", "Wis", "Cha")
test <- c()
for(i in dnd_stats){
test <- c(test, mean(dnd_chars_unique[[i]]))
}
test
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
#App-DnD2
library(shiny)
library(tidyverse)
library(dnddata)
dnd_classes <- c("Artificer", "Barbarian", "Bard", "Blood Hunter", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard")
dnd_stats <- c("Str", "Dex", "Con", "Int", "Wis", "Cha")
dnd_chars_unique_edited <- dnd_chars_unique
filter(dnd_chars_unique, rowSums(is.na(select(dnd_chars_unique, dnd_stats))) > 0L)
for(i in dnd_classes){
dnd_chars_unique_edited <- dnd_chars_unique_edited %>%
mutate(newcol = grepl(i, dnd_chars_unique_edited$justClass))
j <- colnames(dnd_chars_unique_edited)
colnames(dnd_chars_unique_edited) <- c(j[1:(length(j)-1)], i)
}
tier_options <- c("Tier 1", "Tier 2", "Tier 3", "Tier 4")
summary_options <- c("Mean", "Median", "Mode")
mode <- function(x, na.rm = FALSE) {
if(na.rm){ #if na.rm is TRUE, remove NA values from input x
x = x[!is.na(x)]
}
val <- unique(x)
return(val[which.max(tabulate(match(x, val)))])
}
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("DnD 5e Statistics Visualization - Exploring the Fighter"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Text for providing a caption ----
# Note: Changes made to the caption in the textInput control
# are updated in the output area immediately as you type
checkboxGroupInput("stats",
label = "Choose one or more statistics:",
choices = dnd_stats),
radioButtons("multiclass",
label = "Include multiclass fighters?",
choices = c("Yes", "No"),
inline = TRUE),
# Input: Numeric entry for number of obs to view ----
radioButtons("summary",
label = "Choose a summary statistic:",
choices = summary_options,
inline = TRUE),
sliderInput(inputId = "tier",
label = "Gameplay tier:",
value = 1,
min = 1,
max = 4),
# sliderInput(inputId = "max_level",
#             label = "Maximum level:",
#             value = 1,
#             min = 1,
#             max = 20),
numericInput(inputId = "obs",
label = "Number of observations per page:",
value = 10),
numericInput(inputId = "page",
label = "Observation page:",
value = 1),
sliderInput(inputId = "outlier_range",
label = "Outlier Range (Scaling factor of IQR):",
value = 3,
min = 1.5,
max = 10,
step = 0.5),
p("Note: A scaling factor of 1.5 is usually considered a mild outlier, whereas 3 is usually considered an extreme outlier.")
# radioButtons("graph",
#              label = "Choose your type of graph:",
#              choices = graph_options,
#              inline = TRUE),
# conditionalPanel(
#   condition = "input.graph == 'Histogram'",
#   sliderInput(inputId = "bins",
#               label = "Number of bins:",
#               min = 2,
#               max = 50,
#               value = 30)
# )
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Formatted text for caption ----
#h4(paste("Number of characters: ", n)),
# Output: Verbatim text for data summary ----
# textOutput("count"),
# h5("Summary:"),
# verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
# tableOutput("view"),
plotOutput(outputId = "distPlot", click = "plot_click"),
verbatimTextOutput("click_info"),
textOutput("obs_title"),
tableOutput("observations"),
h5("High outliers:"),
tableOutput("outliersHigh"),
h5("Low outliers:"),
tableOutput("outliersLow"),
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output, session) {
tierInput <- reactive({
case_when(
input$tier == tier_options[1] ~ 1:4,
input$tier == tier_options[2] ~ 5:10,
input$tier == tier_options[3] ~ 11:16,
input$tier == tier_options[4] ~ 17:20,
.default = 1
)
})
multiclassInput <- reactive({
case_when(
input$multiclass == "Yes" ~ TRUE,
input$multiclass == "No" ~ FALSE,
.default = 1
)
})
click_tick <- reactive ({
(input$plot_click$x > 0)
})
# observeEvent(input$obs, {
#   if(input$min_level > input$max_level){
#     updateSliderInput(session, "min_level", value = input$max_level)
#   }
# })
#
# observeEvent(input$min_level, {
#   if(input$min_level > input$max_level){
#     updateSliderInput(session, "min_level", value = input$max_level)
#   }
# })
#
# observeEvent(input$max_level, {
#   if(input$max_level < input$min_level){
#     updateSliderInput(session, "max_level", value = input$min_level)
#   }
# })
# class_anyallInput <- reactive({
#   case_when(
#     input$class_anyall == class_anyall_options[1] ~ 1,
#     input$class_anyall == class_anyall_options[2] ~ 2,
#     input$class_anyall == class_anyall_options[3] ~ 3,
#     .default = 1
#   )
# })
datasetInput <- reactive({
# Pre-calculate the boolean vectors for selected and not selected classes
selected_vector_any <- dnd_chars_unique_edited %>%
transmute(selected = if_any(.cols = "Fighter")) %>%
pull()
selected_vector_all <- dnd_chars_unique_edited %>%
transmute(selected = if_all(.cols = "Fighter")) %>%
pull()
not_selected_vector_any <- dnd_chars_unique_edited %>%
transmute(not_selected = if_any(.cols = all_of(setdiff(dnd_classes, "Fighter")))) %>%
pull()
# Now combine these boolean vectors according to the conditions
dnd_chars_unique_edited <- dnd_chars_unique_edited %>%
mutate(selectedClass_any = selected_vector_any,
selectedClass_only = !not_selected_vector_any & selected_vector_any,
selectedClass_all = !not_selected_vector_any  & selected_vector_all)
})
datasetInput_selected <- reactive({
if(multiclassInput()){
dataset <- filter(datasetInput(), selectedClass_any == TRUE)
# } else if(class_anyallInput() == 2) {
#   dataset <- filter(datasetInput(), selectedClass_only == TRUE)
} else {
dataset <- filter(datasetInput(), selectedClass_all == TRUE)
}
dataset <- filter(dataset, level %in% tierInput())
dataset
})
datasetInput_no_outliers <- reactive({
dataset <- datasetInput_selected()
q1 <- quantile(dataset$selectedStat, 0.25)
q3 <- quantile(dataset$selectedStat, 0.75)
iqr <- q3 - q1
dataset <- dataset %>%
filter(selectedStat <= q3 + (input$outlier_range * iqr), selectedStat >= q1 - (input$outlier_range * iqr)) %>%
select(level, processedRace, justClass, subclass, HP, AC, Str, Dex, Con, Int, Wis, Cha)
dataset
})
plotData <- reactive({
dataset <- datasetInput_no_outliers()
sum_stat <- c()
for(i in dnd_stats){
if(input$summary == "Mean"){
sum_stat <- c(stat_means, mean(dataset[[i]]))
} else if(input$summary == "Median"){
sum_stat <- c(stat_means, median(dataset[[i]]))
} else {
sum_stat <- c(stat_means, mode(dataset[[i]]))
}
}
plot_data <- data.frame(Statistics = dnd_stats, input$summary = sum_stat)
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
1:4
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
17:20
10 %in% 17:20
10 %in% 10:20
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
ggplot(plotData(), aes(x = factor(Statistics, level = dnd_stats), y = SumStat)) +
geom_bar(stat="identity") +
labs(x = "Ability Scores", y = input$summary, title = paste("Bar Graph of the ", tolower(input$summary), "s of DnD 5e ability scores for Fighters between levels ",first(tierInput())," and ",last(tierInput()), sep="")) +
scale_y_discrete(limits = c(0, 20))
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
```{r}
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
runApp("App-DnD2", display.mode = "showcase")
