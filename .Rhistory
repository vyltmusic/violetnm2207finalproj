?tables
library(tidyverse)
library(dnddata)
?tables
glimpse(dnd_chars_unique)
row.names(dnd_chars_unique)
colnames(dnd_chars_unique)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
runExample("03_reactivity")
runExample("03_reactivity")
runApp("App-DnD", display.mode = "showcase")
1+1
rock
library(dnddata)
library(tidyverse)
library(dnddata)
dnd_chars_unique
library(tidyverse)
library(dnddata)
dnd_chars_unique$justClass
s
unique(dnd_chars_unique$justClass)
dnd_classes <- c("Artificer", "Barbarian", "Bard", "Blood Hunter", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard")
unique(dnd_chars_unique$justClass)
dnd_classes <- c("Artificer", "Barbarian", "Bard", "Blood Hunter", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard")
dnd_chars_unique_edited <- dnd_chars_unique
for(x in dnd_classes){
x
}
dnd_chars_unique_edited <- dnd_chars_unique_edited
for(x in dnd_classes){
x
}
print(x)
?for
?for
y <- 0
dnd_chars_unique_edited <- dnd_chars_unique
for(x in dnd_classes){
y <- y + 1
}
y
y <- paste(x," ",y)
y <- " "
dnd_chars_unique_edited <- dnd_chars_unique
for(x in dnd_classes){
y <- paste(x," ",y)
}
y
y
y <- " "
dnd_chars_unique_edited <- dnd_chars_unique
for(x in dnd_classes){
y <- paste(x,y)
}
y
dnd_chars_unique$justClass[1]
dnd_chars_unique$justClass[88]
dnd_chars_unique$justClass[260]
dnd_chars_unique$justClass[321]
dnd_chars_unique$justClass[32]
dnd_chars_unique$justClass[301]
grepl(dnd_classes[1], x)
grepl(dnd_classes[2], x)
x <- dnd_chars_unique$justClass[301]
grepl(dnd_classes[1], x)
grepl(dnd_classes[2], x)
x <- dnd_chars_unique$justClass
grepl(dnd_classes[2], x)
typeof(dnd_chars_unique)
df <- data.frame()
typeof(dnd_chars_unique)
test <- list(c("a", "b", "c"))
test
test <- list(a=1:3, b=4:6, c=7:9)
test
colnames(test)
colnames(test)
colnames(test)
test
dnd_chars_unique
test <- data.frame(c("a","b","c"))
test
dnd_chars_unique_edited
colnames(dnd_chars_unique_edited)
x <- colnames(dnd_chars_unique_edited)
x
typeof(x)
typeof(x)
x
c(x, "Artificer", "Barbarian")
x <- colnames(dnd_chars_unique_edited)
colnames(dnd_chars_unique_edited) <- c(x, "Artificer", "Barbarian")
x
x
length(x)
x
x[1:(length(x)-1)]
x
colnames(dnd_chars_unique_edited) <- c(x[1:(length(x)-1)], "Alias")
glimpse(dnd_chars_unique_edited)
dnd_chars_unique_edited <- dnd_chars_unique
for(i in dnd_classes){
dnd_chars_unique_edited <- dnd_chars_unique_edited %>%
mutate(newcol = grepl(i, dnd_chars_unique_edited$justClass))
x <- colnames(dnd_chars_unique_edited)
colnames(dnd_chars_unique_edited) <- c(x[1:(length(x)-1)], i)
}
head(dnd_chars_unique_edited[35:49])
head(dnd_chars_unique_edited["justClass",36:49])
head(dnd_chars_unique_edited[justClass,36:49])
"
head(dnd_chars_unique_edited["justClass",36:49])
x <- colnames(dnd_chars_unique_edited)
x
head(dnd_chars_unique_edited[9,36:49])
head(dnd_chars_unique_edited[c(9,36:49)])
filter(dnd_chars_unique$justClass, nchar(dnd_chars_unique$justClass) > 20)
filter(dnd_chars_unique, nchar(dnd_chars_unique$justClass) > 20)
dnd_chars_unique[8610]
]
dnd_chars_unique(8610)
dnd_chars_unique[1]
dnd_chars_unique
filter(dnd_chars_unique, nchar(dnd_chars_unique$justClass) > 20)
dnd_chars_unique[alias == "nervous_jang"]
dnd_chars_unique
filter(dnd_chars_unique_edited, nchar(dnd_chars_unique$justClass) > 20)
?datasetInput()
datasetInput()
library(shiny)
library(tidyverse)
library(dnddata)
datasetInput()
colnames(dnd_chars_unique_edited)
dnd_stats <- c("HP", "AC", "Str", "Dex", "Con", "Int", "Wis", "Cha")
dnd_chars_unique_edited$Artificer
dnd_chars_unique_edited["Artificer"]
typeof(dnd_chars_unique_edited$Artificer)
typeof(dnd_chars_unique_edited["Artificer"])
typeof(dnd_chars_unique_edited$Artificer)
typeof(dnd_chars_unique_edited["Artificer"])
typeof(dnd_chars_unique_edited$Artificer)
typeof(dnd_chars_unique_edited["Artificer"])
typeof(dnd_chars_unique_edited$Artificer)
typeof(dnd_chars_unique_edited["Artificer"])
typeof(dnd_chars_unique_edited["Artificer"])
typeof(dnd_chars_unique_edited$Artificer)
typeof(dnd_chars_unique_edited[["Artificer"]])
typeof(dnd_chars_unique_edited$Artificer)
typeof(dnd_chars_unique_edited[["Artificer"]])
dataset <- data.frame(stat = classInput)
classInput <- reactive({
dnd_chars_unique_edited[[input$class]]
# switch(input$class,
#"Artificer" = dnd_chars_unique_edited["Artificer"], "Barbarian", "Bard", "Blood Hunter", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard",
# "rock" = rock,
# "pressure" = pressure,
# "cars" = cars)
})
dataset <- data.frame(stat = classInput)
colnames(dnd_chars_unique_edited)
filter(dnd_chars_unique_edited, level == input$level) %>%
.[[input$class]]
filter(dnd_chars_unique_edited, level == 1) %>%
.[[input$class]]
filter(dnd_chars_unique_edited, level == 1) %>%
.[["Artificer"]]
filter(dnd_chars_unique_edited, level == 2) %>%
.[["Artificer"]]
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
filter(dnd_chars_unique_edited, Artificer == TRUE) %>%
head()
filter(dnd_chars_unique_edited, "Artificer" == TRUE) %>%
head()
runApp("App-DnD", display.mode = "showcase")
runExample("03_reactivity")
runApp("App-DnD", display.mode = "showcase")
runExample("01_hello")
colnames(dnd_chars_unique_edited)
runExample("01_hello")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runExample("01_hello")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runExample("01_hello")
runApp("App-DnD", display.mode = "showcase")
dnd_chars_unique %>%
select(processedRace, background, justClass, subclass, HP, AC, Str, Dex, Wis, Cha)
runApp("App-DnD", display.mode = "showcase")
runExample("03_reactivity")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
colnames(dnd_chars_unique_edited)
dnd_chars_unique_edited[[input$class]]
dnd_chars_unique_edited[[input$class]]
dnd_chars_unique_edited["Artificer"]
dnd_chars_unique_edited["Artificer", "Barbarian"]
dnd_chars_unique_edited[36]
dnd_chars_unique_edited[36:38]
dnd_chars_unique_edited[36, 38]
dnd_chars_unique_edited[36,38]
dnd_chars_unique_edited %>%
select("Artificer")
dnd_chars_unique_edited %>%
select(class_test)
class_test <- c("Artificer", "Bard")
dnd_chars_unique_edited %>%
select(class_test)
class_test <- c("Artificer", "Bard")
awa <- dnd_chars_unique_edited %>%
select(class_test)
awa
if_any(awa)
awa %>%
mutate(anyTRUE = if_any())
awa %>%
mutate(selectedClass = if_any())
awa %>%
mutate(selectedClass = if_all())
awa %>%
mutate(selectedClass = if_any())
dnd_chars_unique_edited %>%
mutate(selectedClass = if_any(awa))
dnd_chars_unique_edited %>%
mutate(selectedClass = if_any(.cols = awa))
awa <- dnd_chars_unique_edited %>%
select(class_test)
dnd_chars_unique_edited %>%
mutate(selectedClass = if_any(.cols = awa))
dnd_chars_unique_edited %>%
mutate(selectedClass = if_any(.cols = class_test))
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
is.na(c(NA, 1, 2))
is.na(data.frame(c(NA, 1, 2), c(1, NA, 2)))
any(is.na(data.frame(c(NA, 1, 2), c(1, NA, 2))))
rowSums(is.na(data.frame(c(NA, 1, 2), c(1, NA, 2))))
rowSums(is.na(data.frame(c(NA, 1, 2), c(1, NA, 2)))) > 0L
select(dnd_chars_unique, dnd_stats)
is.na(select(dnd_chars_unique, dnd_stats))
any(is.na(select(dnd_chars_unique, dnd_stats)))
any(is.na(select(dnd_chars_unique, dnd_stats)))
dnd_chars_unique[["HP"]]
j <- dnd_chars_unique_edited[["HP"]]
#dnd_chars_unique_edited <-
dnd_chars_unique_edited %>%
filter(j > (quantile(j, 75) + 1.5 * (quantile(j, 75) - quantile(j, 25))))
j <- dnd_chars_unique_edited[["HP"]]
#dnd_chars_unique_edited <-
dnd_chars_unique_edited %>%
filter(j > (quantile(j, 75) + 1.5 * (quantile(j, 75) - quantile(j, 25))))
j <- dnd_chars_unique_edited[["HP"]]
#dnd_chars_unique_edited <-
dnd_chars_unique_edited %>%
filter(j > (quantile(j, 0.75) + 1.5 * (quantile(j, 0.75) - quantile(j, 0.25))))
j > (quantile(j, 0.75) + 1.5 * (quantile(j, 0.75) - quantile(j, 0.25)))
dnd_chars_unique_edited[[selectedStat]]
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
dataset$selectedStat
dnd_chars_unique_edited$HP
j <- dnd_chars_unique_edited$HP
dnd_chars_unique_edited %>%
filter(HP > (quantile(j, 0.75) + 1.5 * (quantile(j, 0.75) - quantile(j, 0.25))))
runApp("App-DnD", display.mode = "showcase")
quantile(j, 0.75)
quantile(j, 0.75)
quantile(j, 0.25)
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
paste(c("Frequency of ", input$stat, " values between levels ",input$min_level," and ",input$max_level, " (Classes: ",paste(input$class, sep=", "),")"), sep="")
paste(c("Frequency of ", input$stat, " values between levels ",input$min_level," and ",input$max_level, " (Classes: ",paste(input$class, sep=", "),")"), sep="")
paste(c("Frequency of ", "input$stat", " values between levels ","input$min_level"," and ","input$max_level", " (Classes: ",paste("input$class", sep=", "),")"), sep="")
paste(c("Frequency of ", "input$stat", " values between levels ","input$min_level"," and ","input$max_level", " (Classes: ",paste("input$class", sep=", "),")"), sep="")
paste("Frequency of ", "input$stat", " values between levels ","input$min_level"," and ","input$max_level", " (Classes: ",paste("input$class", sep=", "),")")
paste(c("Frequency of ", "input$stat", " values between levels ","input$min_level"," and ","input$max_level"), sep="")
paste("Frequency of ", "input$stat", " values between levels ","input$min_level"," and ","input$max_level", sep="")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
knitr::opts_chunk$set(echo = TRUE)
runApp("App-DnD", display.mode = "showcase")
library(shiny)
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
runApp("App-DnD", display.mode = "showcase")
install.packages('rsconnect')
updateSliderInput(session, "max_level", min = input$min_level)
rsconnect::setAccountInfo(name='violetnm2207finalproj',
token='57FB0DE67FB998F4B40F9DF74AEA466D',
secret='ium/M8GRNPbHARB2WmWsiZx6MxrK5cRqKkjnCtXC')
