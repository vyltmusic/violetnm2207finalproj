#App-DnD2

library(shiny)
library(tidyverse)
library(dnddata)

dnd_classes <- c("Artificer", "Barbarian", "Bard", "Blood Hunter", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard")

dnd_stats <- c("Str", "Dex", "Con", "Int", "Wis", "Cha")

dnd_chars_unique_edited <- dnd_chars_unique
filter(dnd_chars_unique, rowSums(is.na(select(dnd_chars_unique, dnd_stats))) > 0L)
for(i in dnd_classes){
  dnd_chars_unique_edited <- dnd_chars_unique_edited %>%
    mutate(newcol = grepl(i, dnd_chars_unique_edited$justClass))
  j <- colnames(dnd_chars_unique_edited)
  colnames(dnd_chars_unique_edited) <- c(j[1:(length(j)-1)], i)
}

tier_options <- c("Tier 1", "Tier 2", "Tier 3", "Tier 4")

# Define UI for dataset viewer app ----
ui <- fluidPage(
  
  # App title ----
  titlePanel("DnD 5e Statistics Visualization - Exploring the Fighter"),
  
  # Sidebar layout with input and output definitions ----
  sidebarLayout(
    
    # Sidebar panel for inputs ----
    sidebarPanel(
      
      # Input: Text for providing a caption ----
      # Note: Changes made to the caption in the textInput control
      # are updated in the output area immediately as you type

      checkboxGroupInput("stat",
                         label = "Choose one or more statistics:",
                         choices = dnd_stats),
      radioButtons("multiclass",
                   label = "Include multiclass fighters?",
                   choices = c("Yes", "No"),
                   inline = TRUE),
      # Input: Numeric entry for number of obs to view ----
      
      # sliderInput(inputId = "bins",
      #             label = "Number of bins:",
      #             min = 1,
      #             max = 50,
      #             value = 30),
      sliderInput(inputId = "tier",
                  label = "Gameplay tier:",
                  value = 1,
                  min = 1,
                  max = 4),
      # sliderInput(inputId = "max_level",
      #             label = "Maximum level:",
      #             value = 1,
      #             min = 1,
      #             max = 20),
      numericInput(inputId = "obs",
                   label = "Number of observations per page:",
                   value = 10),
      numericInput(inputId = "page",
                   label = "Observation page:",
                   value = 1),
      sliderInput(inputId = "outlier_range",
                  label = "Outlier Range (Scaling factor of IQR):",
                  value = 3,
                  min = 1.5,
                  max = 10,
                  step = 0.5),
      p("Note: A scaling factor of 1.5 is usually considered a mild outlier, whereas 3 is usually considered an extreme outlier.")
      # radioButtons("graph",
      #              label = "Choose your type of graph:",
      #              choices = graph_options,
      #              inline = TRUE),
      # conditionalPanel(
      #   condition = "input.graph == 'Histogram'",
      #   sliderInput(inputId = "bins",
      #               label = "Number of bins:",
      #               min = 2,
      #               max = 50,
      #               value = 30)
      # )
    ),
    
    
    # Main panel for displaying outputs ----
    mainPanel(
      
      # Output: Formatted text for caption ----
      
      #h4(paste("Number of characters: ", n)),
      
      # Output: Verbatim text for data summary ----
      # textOutput("count"),
      # h5("Summary:"),
      # verbatimTextOutput("summary"),
      # Output: HTML table with requested number of observations ----
      # tableOutput("view"),
      plotOutput(outputId = "distPlot", click = "plot_click"),
      verbatimTextOutput("click_info"),
      textOutput("obs_title"),
      tableOutput("observations"),
      h5("High outliers:"),
      tableOutput("outliersHigh"),
      h5("Low outliers:"),
      tableOutput("outliersLow"),
    )
  )
)

# Define server logic to summarize and view selected dataset ----
server <- function(input, output, session) {
  
  tierInput <- reactive({
    case_when(
      input$tier == tier_options[1] ~ 1:4,
      input$tier == tier_options[2] ~ 5:10,
      input$tier == tier_options[3] ~ 11:16,
      input$tier == tier_options[4] ~ 17:20,
      .default = 1
    )
  })
  
  multiclassInput <- reactive({
    case_when(
      input$multiclass == "Yes" ~ TRUE,
      input$multiclass == "No" ~ FALSE,
      .default = 1
    )
  })
  
  click_tick <- reactive ({
    (input$plot_click$x > 0)
  })
  
  # observeEvent(input$obs, {
  #   if(input$min_level > input$max_level){
  #     updateSliderInput(session, "min_level", value = input$max_level)
  #   }
  # })
  # 
  # observeEvent(input$min_level, {
  #   if(input$min_level > input$max_level){
  #     updateSliderInput(session, "min_level", value = input$max_level)
  #   }
  # })
  # 
  # observeEvent(input$max_level, {
  #   if(input$max_level < input$min_level){
  #     updateSliderInput(session, "max_level", value = input$min_level)
  #   }
  # })
  
  # class_anyallInput <- reactive({
  #   case_when(
  #     input$class_anyall == class_anyall_options[1] ~ 1,
  #     input$class_anyall == class_anyall_options[2] ~ 2,
  #     input$class_anyall == class_anyall_options[3] ~ 3,
  #     .default = 1
  #   )
  # })
  
  datasetInput <- reactive({
    # Pre-calculate the boolean vectors for selected and not selected classes
    selected_vector_any <- dnd_chars_unique_edited %>%
      transmute(selected = if_any(.cols = "Fighter")) %>%
      pull()
    
    selected_vector_all <- dnd_chars_unique_edited %>%
      transmute(selected = if_all(.cols = "Fighter")) %>%
      pull()
    
    not_selected_vector_any <- dnd_chars_unique_edited %>%
      transmute(not_selected = if_any(.cols = all_of(setdiff(dnd_classes, "Fighter")))) %>%
      pull()
    
    # Now combine these boolean vectors according to the conditions
    dnd_chars_unique_edited <- dnd_chars_unique_edited %>%
      mutate(selectedStat = .data[[input$stat]],
             selectedClass_any = selected_vector_any,
             selectedClass_only = !not_selected_vector_any & selected_vector_any,
             selectedClass_all = !not_selected_vector_any  & selected_vector_all)
  })
  
  datasetInput_selected <- reactive({
    if(multiclassInput()){
      dataset <- filter(datasetInput(), selectedClass_any == TRUE)
    } else if(class_anyallInput() == 2) {
      dataset <- filter(datasetInput(), selectedClass_only == TRUE)
    } else {
      dataset <- filter(datasetInput(), selectedClass_all == TRUE)
    }
    dataset <- filter(dataset, level %in% tierInput())
    dataset
  })
  
  datasetInput_no_outliers <- reactive({
    dataset <- datasetInput_selected()
    q1 <- quantile(dataset$selectedStat, 0.25)
    q3 <- quantile(dataset$selectedStat, 0.75)
    iqr <- q3 - q1
    dataset <- dataset %>%
      filter(selectedStat <= q3 + (input$outlier_range * iqr), selectedStat >= q1 - (input$outlier_range * iqr)) %>%
      select(level, processedRace, justClass, subclass, HP, AC, Str, Dex, Con, Int, Wis, Cha)
    dataset
  })
  
  
  #datasetInput <- reactive({
  # filter(dnd_chars_unique_edited, level == input$level) %>%
  #.[[input$class]]
  # switch(input$class,
  #"Artificer" = dnd_chars_unique_edited["Artificer"], "Barbarian", "Bard", "Blood Hunter", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard",
  # "rock" = rock,
  # "pressure" = pressure,
  # "cars" = cars)
  #})
  
  # Create caption ----
  # The output$caption is computed based on a reactive expression
  # that returns input$caption. When the user changes the
  # "caption" field:
  #
  # 1. This function is automatically called to recompute the output
  # 2. New caption is pushed back to the browser for re-display
  #
  # Note that because the data-oriented reactive expressions
  # below don't depend on input$caption, those expressions are
  # NOT called when input$caption changes
  # output$caption <- renderText({
  #   input$caption
  # })
  
  # Generate a summary of the dataset ----
  # The output$summary depends on the datasetInput reactive
  # expression, so will be re-executed whenever datasetInput is
  # invalidated, i.e. whenever the input$dataset changes
  # output$summary <- renderPrint({
  #   if(class_anyallInput() == 1){
  #     dataset <- filter(datasetInput(), selectedClass_any == TRUE)
  #   } else if(class_anyallInput() == 2) {
  #     dataset <- filter(datasetInput(), selectedClass_only == TRUE)
  #   } else {
  #     dataset <- filter(datasetInput(), selectedClass_all == TRUE)
  #   }
  #   dataset <- filter(dataset, level >= input$min_level, level <= input$max_level) %>%
  #     select(level, HP, AC, Str, Dex, Con, Int, Wis, Cha)
  #   summary(dataset)
  # })
  
  output$count <- renderText({
    count_no_outliers <- nrow(datasetInput_no_outliers())
    count <- nrow(datasetInput_selected())
    paste("Total Observation Count: ", count_no_outliers, " (", count - count_no_outliers, " outliers omitted)", sep = "")
  })
  
  output$distPlot <- renderPlot({
    if(class_anyallInput() == 1){
      dataset <- filter(datasetInput(), selectedClass_any == TRUE)
    } else if(class_anyallInput() == 2) {
      dataset <- filter(datasetInput(), selectedClass_only == TRUE)
    } else {
      dataset <- filter(datasetInput(), selectedClass_all == TRUE)
    }
    dataset <- filter(dataset, level >= input$min_level, level <= input$max_level)
    q1 <- quantile(dataset$selectedStat, 0.25)
    q3 <- quantile(dataset$selectedStat, 0.75)
    iqr <- q3 - q1
    dataset <- dataset %>%
      filter(selectedStat <= q3 + (input$outlier_range * iqr), selectedStat >= q1 - (input$outlier_range * iqr))
    
    if(input$graph == graph_options[1]){
      ggplot(dataset, aes(x = selectedStat)) +
        geom_bar() +
        labs(x = input$stat, title = paste("Bar Graph of Frequency of ", input$stat, " values between levels ",input$min_level," and ",input$max_level, sep=""), caption = paste("(Classes: ",ifelse(nchar(input$class) < 2, "All", paste(input$class, collapse=", ")),")", sep=""))
    } else {
      x <- dataset$selectedStat
      ggplot(dataset, aes(x = selectedStat)) +
        geom_histogram(binwidth = length(unique(x)) / (input$bins - 1)) +
        labs(x = input$stat, title = paste("Histogram of Frequency of ", input$stat, " values between levels ",input$min_level," and ",input$max_level, sep=""), caption = paste("(Classes: ",ifelse(nchar(input$class) < 2, "All", paste(input$class, collapse=", ")),")", sep=""))
    }
  })
  
  output$click_info <- renderText({
    if(length(input$plot_click) > 0){
      dataset <- datasetInput_selected()
      vector <- dataset[[input$stat]]
      selected_x <- round(input$plot_click$x, 0)
      paste("Click on the graph to view details\n", input$stat, ": ", selected_x, "\nCount: ", length(vector[vector == selected_x]), sep="")
    } else {
      paste("Click on the graph to view details")
    }
  })
  
  
  
  output$obs_title <- renderText({
    page <- (input$page - 1) * input$obs
    paste("Observations (Showing entries ", page + 1," - " , page + input$obs, "):", sep = "")
  })
  
  
  output$observations <- renderTable({
    dataset <- datasetInput_no_outliers()
    page <- (input$page - 1) * input$obs
    dataset[page:(page + input$obs),]
  })
  
  output$outliersHigh <- renderTable({
    dataset <- datasetInput_selected()
    q1 <- quantile(dataset$selectedStat, 0.25)
    q3 <- quantile(dataset$selectedStat, 0.75)
    iqr <- q3 - q1
    dataset <- dataset %>%
      filter(selectedStat > q3 + (input$outlier_range * iqr)) %>%
      select(level, processedRace, justClass, subclass, HP, AC, Str, Dex, Con, Int, Wis, Cha)
    dataset
  })
  
  output$outliersLow <- renderTable({
    dataset <- datasetInput_selected()
    q1 <- quantile(dataset$selectedStat, 0.25)
    q3 <- quantile(dataset$selectedStat, 0.75)
    iqr <- q3 - q1
    dataset <- dataset %>%
      filter(selectedStat < q1 - (input$outlier_range * iqr)) %>%
      select(level, processedRace, justClass, subclass, HP, AC, Str, Dex, Con, Int, Wis, Cha)
    dataset
  })
  
}

# Create Shiny app ----
shinyApp(ui, server)
